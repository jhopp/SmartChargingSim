using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SmartChargingSim
{
    internal class State
    {
        public float[] CarChargeCable;                  //The charge on every cable
        public int[] UsedSpaces;                        //The number of occupied parking spots at every parking place
        public int[] ChargingSpaces;                    //The number of charging cars at every parking place
        public float[] SolarRevenue;                    //The solar revenue generated by every parking place
        public PriorityQueue<Car, float>[] carQueues;   //The queues of waiting cars for every parking place
        private List<float> AverageLoads;
        public float[] PreviousCarChargeCable;          //The charge on every cable at the previous event.
        public bool Season;                             //The season in the current scenario
        public int[] PSpotSolarPower;                   //Equals 1 if parkingspot i has solar panels
        public int[] numberOfChargingStations;          //The maximum number of cars that can charge
        public State(int scenario = 0)
        {
            CarChargeCable = new float[9];
            UsedSpaces = new int[7]; 
            ChargingSpaces = new int[7]; 
            SolarRevenue = new float[7];
            AverageLoads = new List<float>();
            carQueues = new PriorityQueue<Car, float>[7];
            numberOfChargingStations = new int[] { 60, 80, 60, 70, 60, 60, 50 };
            PreviousCarChargeCable = new float[9];
            InitializeScenario(scenario);
            for (int i = 0; i < carQueues.Length; i++)
                carQueues[i] = new PriorityQueue<Car, float>();
        }

        /// <summary>
        /// Checks if there is a stable cycle. If the average load on the cable on time 00:00 over the last 5 days is within a margin of the average, returns true.
        /// </summary>
        /// <param name="margin">The margin within which the averages have to fall to be considered stable</param>
        /// <returns>True if there is a stable cycle, false otherwise</returns>
        public bool IsStable(float margin)
        {
            float averageLoad = 0;
            for (int i = 0; i < CarChargeCable.Length; i++)
            {
                averageLoad += CarChargeCable[i];
            }
            AverageLoads.Add(averageLoad);
            var a = AverageLoads.Average();

            var length = AverageLoads.Count - 5;
            if (AverageLoads.Count > 4)
            {
                var currentLoads = AverageLoads.GetRange(length, 5);
                if (currentLoads.Max() < (margin + 1) * a && currentLoads.Min() > (margin + 1) / a)
                    return true;
            }
            return false;
        }

        /// <summary>
        /// Initialises the season and parking placs with solar power depending on the scenario.
        /// </summary>
        /// <param name="scenario">The current scenario</param>
        public void InitializeScenario(int scenario)
        {
            switch (scenario)
            {
                case (1):
                    PSpotSolarPower = new int[7];
                    Season = false;
                    break;
                case (2):
                    PSpotSolarPower = new int[] { 0, 0, 0, 0, 0, 1, 1 };
                    Season = false;
                    break;
                case (3):
                    PSpotSolarPower = new int[] { 0, 0, 0, 0, 0, 1, 1 };
                    Season = true;
                    break;
                case (4):
                    PSpotSolarPower = new int[] { 1, 1, 0, 0, 0, 1, 1 };
                    Season = false;
                    break;
                case (5):
                    PSpotSolarPower = new int[] { 1, 1, 0, 0, 0, 1, 1 };
                    Season = true;
                    break;
                case (6):
                    PSpotSolarPower = new int[] { 1, 1, 1, 0, 1, 1, 1 };
                    Season = true;
                    break;
                default:
                    PSpotSolarPower = new int[7];
                    Season = false;
                    break;
            }
        }

        /// <summary>
        /// Tests if the state does not contain impossible values. For example, a negative number of charging cars.
        /// </summary>
        /// <returns>true if the state is valid</returns>
        public bool ValidateState()
        {
            bool valid = true;

            for (int i = 0; i < UsedSpaces.Length; i++)
            {
                // not more cars than spaces
                if (UsedSpaces[i] > numberOfChargingStations[i])
                    valid = false;
                // not negative number of cars charging
                if (ChargingSpaces[i] < 0)
                    valid = false;
                // not more cars charging than present at parking space
                if (ChargingSpaces[i] > UsedSpaces[i])
                    valid = false;
            }

            // is the total power used at parking places and total load on cables equal? (non-solar only)
            if (PSpotSolarPower.Sum() == 0)
            {
                int[] numOfCablesToSource = new int[] { 2, 2, 2, 1, 3, 3, 2 };
                float powerUsed = 0;
                for (int i = 0; i < ChargingSpaces.Length; i++)
                    powerUsed += ChargingSpaces[i] * 6 * numOfCablesToSource[i];
                float powerSupplied = CarChargeCable.Sum();
                if (!(powerUsed == powerSupplied))
                    valid = false;
            }

            return valid;
        }
    }
}
