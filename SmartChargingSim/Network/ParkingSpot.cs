using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SmartChargingSim.Network
{
    internal class ParkingSpot
    {
        public List<Cable> Cables;
        public Cable parentCable;
        public List<ParkingSpot> Children;
        public int Id;
        public float solarUsed;
        public float previousSolarUsed;
        public float previousSolarGenerated;
        public ParkingSpot(Cable cable, List<ParkingSpot> Children, int id)
        {
            parentCable = cable;
            this.Children = Children;
            Id = id;
            previousSolarUsed = 0;
        }

        /// <summary>
        /// Calculates the energy left over after the solar generated here plus the solar from children is used to charge cars at this parking space.
        /// </summary>
        /// <param name="solarRevenue"></param>
        /// <param name="chargingSpaces"></param>
        /// <returns>The solar energy that can be used by its parent</returns>
        public float CalculateSupply(float[] solarRevenue, int[]chargingSpaces)
        {
            float demand = 0;
            float supply = 0;
            if (Id > 0) {
                demand += chargingSpaces[Id-1] * 6;
                supply += solarRevenue[Id-1] - demand;
                solarUsed = Math.Min(solarRevenue[Id - 1], demand);
            }
            if (Children.Count > 0)
            {
                foreach (ParkingSpot child in Children)
                {
                    supply += child.CalculateSupply(solarRevenue, chargingSpaces);
                }
                return supply;
            }
            return supply;
        }

        /// <summary>
        /// Calculates the charge on the 'parent' cable from this parking spot. i.e. parking spot 1 has parent cable 1.
        /// </summary>
        /// <param name="parentSupplyUsed">The solar generated by this parking space used by other nodes in the network</param>
        /// <param name="solarRevenue">The solar revenue of this parking place</param>
        /// <param name="chargingSpaces">The number of cars charging at every parking space</param>
        /// <param name="parentCarCableCharge">The charge on every cable in the current state</param>
        /// <returns>The list of cable charges with its own charge updated</returns>
        public float [] CalculateCableCharge(float parentSupplyUsed,float[] solarRevenue,int[]chargingSpaces, float[] parentCarCableCharge)
        {
            float ownSupply = CalculateSupply(solarRevenue, chargingSpaces);
            if(Id!=4)
                solarUsed += parentSupplyUsed;
            if (ownSupply < 0)
                parentCarCableCharge[parentCable.id] = -ownSupply;
            else
                parentCarCableCharge[parentCable.id] = parentSupplyUsed;
            CalculateChildSupply(parentSupplyUsed, parentCarCableCharge, solarRevenue, chargingSpaces);
            return parentCarCableCharge;
        }

        /// <summary>
        /// Calculates the solar energy coming from children and distributes solar over its children.
        /// </summary>
        /// <param name="parentSupplyUsed"></param>
        /// <param name="parentCarCableCharge"></param>
        /// <param name="solarRevenue"></param>
        /// <param name="chargingSpaces"></param>
        /// <returns>The total power coming from children of this parking space.</returns>
        public float [] CalculateChildSupply(float parentSupplyUsed, float[] parentCarCableCharge, float[] solarRevenue, int[] chargingSpaces)
        {
            //Calculate the amount of solar from children
            float [] supplyUsed= new float [Children.Count];
            float [] supplies = new float [Children.Count];
            float demand = 0;
            for (int i = 0; i < Children.Count; i++)
                {
                float childsup = Children[i].CalculateSupply(solarRevenue, chargingSpaces);
                if (childsup<= 0)
                {
                    demand += -childsup;
                }
                else {
                    supplies[i] = childsup;
                }
            }
            demand += parentSupplyUsed;
            //Calculate the amount that other children use
            for(int i =0; i< Children.Count; i++){
                if (demand == 0)
                    break;
                var used = Math.Min(Math.Min(200, supplies[i]), demand);
                demand -= used;
                supplies[i] -= used;
                supplyUsed[i]+= used;
            }
            //Let the children calculate their cable charge based on the amount of solar used by other children
            for (int i = 0; i < Children.Count; i++)
            {
                parentCarCableCharge = Children[i].CalculateCableCharge(supplyUsed[i], solarRevenue, chargingSpaces, parentCarCableCharge);
            }
            return parentCarCableCharge;
        }
    }
}
